{
  
    
        "post0": {
            "title": "Trading with Implied Volatility",
            "content": "Importing Necessary Libraries . import fred import matplotlib.pyplot as plt import pandas as pd from openbb_terminal import api as openbb . Importing Dataframe with Pytrends . merged = pd.read_csv(&#39;/Users/sebastiansoran/PycharmProjects/sssssss/new_merged.csv&#39;) new_df = merged.drop(columns= &#39;Unnamed: 0&#39;) new_df[&#39;closing/searched&#39;] = new_df[&#39;Closing&#39;]/new_df[&#39;homedepot&#39;] new_df[&#39;date&#39;] = pd.to_datetime(new_df[&#39;date&#39;]) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 154 entries, 0 to 153 Data columns (total 6 columns): # Column Non-Null Count Dtype -- -- 0 date 154 non-null datetime64[ns] 1 homedepot 154 non-null int64 2 Closing 154 non-null float64 3 Quarters 154 non-null object 4 Volume 154 non-null int64 5 closing/searched 154 non-null float64 dtypes: datetime64[ns](1), float64(2), int64(2), object(1) memory usage: 7.3+ KB None . openbb.stocks.options.grhist(symbol = &quot;HD&quot;, expiry = &quot;2023-01-20&quot;, strike = 320, greek = &quot;iv&quot;, export= &quot;csv&quot;) . . Saved file: /Users/sebastiansoran/PycharmProjects/sssssss/OpenBBTerminal/exports/stocks/options/screen/grhist_20220827_214044.csv . greeks = pd.read_csv(&#39;/Users/sebastiansoran/PycharmProjects/sssssss/OpenBBTerminal/exports/stocks/options/screen/grhist_20220827_214044.csv&#39;) ##Rename column 1 and change to date only greeks[&#39;Unnamed: 0&#39;] = pd.to_datetime(greeks[&#39;Unnamed: 0&#39;]) greeks.rename(columns={&#39;Unnamed: 0&#39;: &#39;date&#39;}, inplace= True) greeks[&#39;date&#39;] = greeks[&#39;date&#39;].dt.date greeks[&#39;date&#39;] = pd.to_datetime(greeks[&#39;date&#39;]) greeks = greeks.groupby(&#39;date&#39;)[&#39;iv&#39;,&#39;gamma&#39;,&#39;delta&#39;,&#39;theta&#39;,&#39;vega&#39;,&#39;premium&#39;,&#39;price&#39;].mean() greeks = greeks.reset_index(level=0) greeks . date iv gamma delta theta vega premium price . 0 2021-04-01 | 0.235560 | 0.004355 | 0.479930 | -0.028314 | 1.460670 | 28.553233 | 307.837951 | . 1 2021-04-06 | 0.233727 | 0.004293 | 0.506924 | -0.028522 | 1.490580 | 31.455500 | 313.994341 | . 2 2021-04-07 | 0.229521 | 0.004404 | 0.496975 | -0.027880 | 1.482627 | 29.876167 | 312.176595 | . 3 2021-04-08 | 0.226717 | 0.004430 | 0.507088 | -0.027772 | 1.489970 | 30.665633 | 314.643306 | . 4 2021-04-09 | 0.223989 | 0.004412 | 0.525859 | -0.027686 | 1.503973 | 32.515100 | 318.934526 | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 274 2022-08-12 | 0.270380 | 0.007024 | 0.488410 | -0.068298 | 0.820862 | 18.913200 | 313.876755 | . 275 2022-08-18 | 0.268431 | 0.006870 | 0.576941 | -0.076169 | 0.821223 | 25.000600 | 324.725279 | . 276 2022-08-22 | 0.270332 | 0.007333 | 0.486795 | -0.075289 | 0.794827 | 18.260400 | 312.210000 | . 277 2022-08-23 | 0.266517 | 0.007454 | 0.429819 | -0.066983 | 0.764189 | 14.684400 | 306.680000 | . 278 2022-08-24 | 0.264305 | 0.007535 | 0.435138 | -0.066983 | 0.765798 | 14.833900 | 307.570000 | . 279 rows × 8 columns . search_and_greeks = pd.merge(greeks,new_df, on = &#39;date&#39;) print(search_and_greeks) ##LIMITATION - TOO LITTLE DATES, GO BACK TO PYTRENDS AND TRY TO GATHER OLDER DATA FURTHER BACK FOR MORE ENTRIES . date iv gamma delta theta vega premium 0 2022-01-10 0.272438 0.002610 0.781678 -0.035117 1.093703 79.616133 1 2022-01-12 0.273567 0.002590 0.783231 -0.035275 1.088103 80.176667 2 2022-01-13 0.278131 0.002583 0.779462 -0.036380 1.097137 80.197467 3 2022-01-14 0.283735 0.002950 0.734088 -0.040467 1.177107 69.125467 4 2022-01-18 0.271792 0.003217 0.722422 -0.039278 1.180990 63.539667 .. ... ... ... ... ... ... ... 67 2022-08-09 0.277186 0.006889 0.425409 -0.066146 0.791027 15.501767 68 2022-08-10 0.266857 0.007113 0.471865 -0.066391 0.819002 17.820767 69 2022-08-11 0.273738 0.006971 0.466697 -0.068012 0.813208 17.833600 70 2022-08-12 0.270380 0.007024 0.488410 -0.068298 0.820862 18.913200 71 2022-08-18 0.268431 0.006870 0.576941 -0.076169 0.821223 25.000600 price homedepot Closing Quarters Volume closing/searched 0 387.460000 88 387.46 Q1 6440000 4.402955 1 388.096667 80 389.40 Q1 3623300 4.867500 2 387.537628 66 386.98 Q1 3466300 5.863333 3 372.502021 77 372.00 Q1 6336200 4.831169 4 366.973333 68 366.72 Q1 6435200 5.392941 .. ... ... ... ... ... ... 67 304.437522 48 305.21 Q3 2607000 6.358542 68 311.658137 46 311.58 Q3 3863400 6.773478 69 310.624145 47 310.69 Q3 2444100 6.610426 70 313.876755 49 314.89 Q3 2271100 6.426327 71 324.725279 45 325.21 Q3 2899600 7.226889 [72 rows x 13 columns] . search_and_greeks[&#39;Closing_s&#39;] = search_and_greeks[&#39;Closing&#39;].shift(-1) search_and_greeks[&#39;Volume_s&#39;] = search_and_greeks[&#39;Volume&#39;].shift(-1) search_and_greeks[&#39;homedepot_s&#39;] = search_and_greeks[&#39;homedepot&#39;].shift(-1) search_and_greeks[&#39;closing_price_higher&#39;] = search_and_greeks[&#39;Closing&#39;] &lt; search_and_greeks[&#39;Closing_s&#39;] search_and_greeks[&#39;volume_higher&#39;] = search_and_greeks[&#39;Volume&#39;] &lt; search_and_greeks[&#39;Volume_s&#39;] search_and_greeks[&#39;search_trends_higher&#39;] = search_and_greeks[&#39;homedepot&#39;] &lt; search_and_greeks[&#39;homedepot_s&#39;] print(search_and_greeks) . date iv gamma delta theta vega premium 0 2022-01-10 0.272438 0.002610 0.781678 -0.035117 1.093703 79.616133 1 2022-01-12 0.273567 0.002590 0.783231 -0.035275 1.088103 80.176667 2 2022-01-13 0.278131 0.002583 0.779462 -0.036380 1.097137 80.197467 3 2022-01-14 0.283735 0.002950 0.734088 -0.040467 1.177107 69.125467 4 2022-01-18 0.271792 0.003217 0.722422 -0.039278 1.180990 63.539667 .. ... ... ... ... ... ... ... 67 2022-08-09 0.277186 0.006889 0.425409 -0.066146 0.791027 15.501767 68 2022-08-10 0.266857 0.007113 0.471865 -0.066391 0.819002 17.820767 69 2022-08-11 0.273738 0.006971 0.466697 -0.068012 0.813208 17.833600 70 2022-08-12 0.270380 0.007024 0.488410 -0.068298 0.820862 18.913200 71 2022-08-18 0.268431 0.006870 0.576941 -0.076169 0.821223 25.000600 price homedepot Closing Quarters Volume closing/searched 0 387.460000 88 387.46 Q1 6440000 4.402955 1 388.096667 80 389.40 Q1 3623300 4.867500 2 387.537628 66 386.98 Q1 3466300 5.863333 3 372.502021 77 372.00 Q1 6336200 4.831169 4 366.973333 68 366.72 Q1 6435200 5.392941 .. ... ... ... ... ... ... 67 304.437522 48 305.21 Q3 2607000 6.358542 68 311.658137 46 311.58 Q3 3863400 6.773478 69 310.624145 47 310.69 Q3 2444100 6.610426 70 313.876755 49 314.89 Q3 2271100 6.426327 71 324.725279 45 325.21 Q3 2899600 7.226889 Closing_s Volume_s homedepot_s closing_price_higher volume_higher 0 389.40 3623300.0 80.0 True False 1 386.98 3466300.0 66.0 False False 2 372.00 6336200.0 77.0 False True 3 366.72 6435200.0 68.0 False True 4 359.69 5175100.0 74.0 False False .. ... ... ... ... ... 67 311.58 3863400.0 46.0 True True 68 310.69 2444100.0 47.0 False False 69 314.89 2271100.0 49.0 True False 70 325.21 2899600.0 45.0 True True 71 NaN NaN NaN False False search_trends_higher 0 False 1 False 2 True 3 False 4 True .. ... 67 False 68 True 69 True 70 False 71 False [72 rows x 19 columns] . from sklearn.neighbors import KNeighborsClassifier import numpy as np import matplotlib.pyplot as plt from sklearn.model_selection import train_test_split X = search_and_greeks[[&#39;volume_higher&#39; ,&#39;premium&#39;,&quot;iv&quot;, &#39;homedepot&#39;]].values y = search_and_greeks[&#39;closing_price_higher&#39;].values X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.30, stratify= y) knn = KNeighborsClassifier(n_neighbors=10) knn.fit(X_train,y_train) print(knn.score(X_test,y_test)) . 0.6363636363636364 . %matplotlib inline train_accuracies = {} test_accuracies = {} neighbors = np.arange(1,15) for neighbor in neighbors: knn = KNeighborsClassifier(n_neighbors=neighbor) knn.fit(X_train, y_train) train_accuracies[neighbor] = knn.score(X_train, y_train) test_accuracies[neighbor] = knn.score(X_test, y_test) #Plotting accuracy plt.figure(figsize = (8,6)) plt.title(&quot;KNN: different number of neighbors&quot;) plt.plot(neighbors, train_accuracies.values(), label = &#39;Training Accuracy&#39;) plt.plot(neighbors, test_accuracies.values(), label = &#39;Testing Accuracy&#39;) plt.legend() plt.xlabel(&#39;Num of Neighbors&#39;) plt.ylabel(&#39;Accuracy&#39;) plt.show() . def get_neighbors(X_train, sample, k=5): neighbors = [(x, np.sum(np.abs(x - sample))) for x in X_train] neighbors = sorted(neighbors, key=lambda x: x[1]) return np.array([x for x, _ in neighbors[:k]]) _, ax = plt.subplots(nrows=1, ncols=10, figsize=(15, 5)) for i in range(10): sample = X_test[i] neighbors = get_neighbors(X_train, sample, k=10) ax[i].scatter(X_train[:, 0], X_train[:, 1], c=&quot;skyblue&quot;) ax[i].scatter(neighbors[:, 0], neighbors[:, 1], edgecolor=&quot;green&quot;) ax[i].scatter(sample[0], sample[1], marker=&quot;+&quot;, c=&quot;red&quot;, s=100) ax[i].set(xlim=(-20, 20), ylim=(0, 50)) plt.tight_layout() . #OLS under the hood, showing R2 from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression X = search_and_greeks.drop([&#39;iv&#39;,&#39;date&#39;,&#39;Quarters&#39;,&#39;Closing_s&#39;,&#39;Volume_s&#39;,&#39;homedepot_s&#39;,&#39;closing/searched&#39;], axis = 1).values y = search_and_greeks[&#39;iv&#39;].values X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.30) reg_all = LinearRegression() reg_all.fit(X_train, y_train) y_pred = reg_all.predict(X_test) reg_all.score(X_test, y_test) ###Not representative of the model&#39;s ability to generalize to unseen data, because its dependant on the way we split the data. ###Have to use cross validation . 0.9530073664842984 . from sklearn.metrics import mean_squared_error mean_squared_error(y_test, y_pred, squared = False) . 0.6330473492851778 . ##k-fold CV and model performance, however more folds is more computationally expensive from sklearn.model_selection import cross_val_score, KFold kf = KFold(n_splits= 5, shuffle=True) reg = LinearRegression() cv_result = cross_val_score(reg,X,y,cv=kf) print(cv_result) print(np.mean(cv_result), np.std(cv_result)) print(np.quantile(cv_result, [0.025,0.975])) . [0.9359104 0.57698279 0.92730994 0.9617947 0.97627895] 0.8756553553130848 0.1503657293971246 [0.6120155 0.97483052] . ##Ridge Regression - penalizes large positive or negative coefficients from sklearn.linear_model import Ridge scores = [] for alpha in [0.1, 1,10,100,500,1000]: ridge = Ridge(alpha=alpha) ridge.fit(X_train,y_train) y_pred = ridge.predict(X_test) scores.append(ridge.score(X_test,y_test)) print(scores) ##Same Method from sklearn.metrics import r2_score rr = Ridge(alpha=0.1) rr.fit(X_train, y_train) pred_train_rr= rr.predict(X_train) print(np.sqrt(mean_squared_error(y_train,pred_train_rr))) print(r2_score(y_train, pred_train_rr)) pred_test_rr= rr.predict(X_test) print(np.sqrt(mean_squared_error(y_test,pred_test_rr))) print(r2_score(y_test, pred_test_rr)) . [0.1047314394571659, 0.12423506556693265, 0.18314904733749726, 0.2738256770518912, 0.24383086405199428, 0.1677605885939184] 0.00605667017621542 0.517401337257386 0.007867533073097755 0.1047314394571659 . from sklearn.linear_model import Lasso scores = [] for alpha in [0.001,.01,0.1, 1,10,20,50,100]: ridge = Ridge(alpha=alpha) ridge.fit(X_train,y_train) y_pred = ridge.predict(X_test) scores.append(ridge.score(X_test,y_test)) print(scores) . [0.2888229271501861, 0.14072213552748347, 0.1047314394571659, 0.12423506556693265, 0.18314904733749726, 0.2065855258782523, 0.2436462082532973, 0.2738256770518912] . from sklearn.linear_model import Lasso X = search_and_greeks.drop([&#39;iv&#39;,&#39;date&#39;,&#39;Quarters&#39;,&#39;Closing_s&#39;,&#39;Volume_s&#39;,&#39;homedepot_s&#39;,&#39;closing/searched&#39;], axis = 1).values y = search_and_greeks[&#39;iv&#39;].values names = search_and_greeks.drop([&#39;iv&#39;,&#39;date&#39;,&#39;Quarters&#39;,&#39;Closing_s&#39;,&#39;Volume_s&#39;,&#39;homedepot_s&#39;,&#39;closing/searched&#39;], axis = 1).columns lasso = Lasso(alpha = 0.0001) lasso_coef = lasso.fit(X,y).coef_ plt.bar(names,lasso_coef) plt.xticks(rotation = 90) plt.show() . from sklearn.model_selection import RandomizedSearchCV kf = KFold(n_splits=4, shuffle= True) param_grid = {&#39;alpha&#39;: np.arange(0.0001,1,10), &quot;solver&quot;: [&#39;sag&#39;,&#39;lsqr&#39;]} ridge = Ridge() ridge_cv = RandomizedSearchCV(ridge, param_grid, cv=kf, n_iter=2) ridge_cv.fit(X_train,y_train) print(ridge_cv.best_params_,ridge_cv.best_score_) . {&#39;solver&#39;: &#39;lsqr&#39;, &#39;alpha&#39;: 0.0001} -0.09270934040503556 . test_score = ridge_cv.score(X_test,y_test) print(test_score) . 0.001340380679800468 .",
            "url": "https://sebastiansoran.github.io/ws/fastpages/jupyter/openbb/pytrends/2022/09/06/IV.html",
            "relUrl": "/fastpages/jupyter/openbb/pytrends/2022/09/06/IV.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sebastiansoran.github.io/ws/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sebastiansoran.github.io/ws/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Sebi",
          "content": "Sebi is a data scientist with extensive experience in finance and economics. He loves gathering data and implementing data projects into concrete business plans to create robust solutions. . Some interesting projects he has worked on include: building ML algoriths for private firms using customer data and macroeconomics to better decide credit risks. Moreover, scraping and utilizing google search data for inventory prediction. . Sebi’s goal is to strategically partner with the right organization to pull key insights from data while also elevating the understanding and implementation of data systems for the client. .",
          "url": "https://sebastiansoran.github.io/ws/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sebastiansoran.github.io/ws/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}